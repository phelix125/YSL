import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;
public class Connect4{
    //Initial static variables, board is used to check for win conidtion, coin/Wcoin really could be a boolean instead.
    static char[][] board = new char[6][7];
    static char coin = 'X';
    static char Wcoin = '0';
    static int [] count = new int[6];
    
    public static void main(String arg[]){
        for(char[] row:board){// Fill's the entire board with the char '*'
            Arrays.fill(row,'*');
        }
        Scanner input = new Scanner(System.in);
        while(true){
            System.out.println(" It is " + coin + "'s Turn!, Enter a number to drop your coin");
            System.out.println();
            System.out.println("   1   2   3   4   5   6   7  ");
            System.out.println();
            printBoard();
            int temp = input.nextInt();
            if(temp == '0'){
                break;
            }
            
            if(coin == 'X'){//Player X/s turn
                Drop(temp);
                coin = '0';
                Wcoin='X';

            }else{
                Drop(temp);// Player 0's Turn
                coin = 'X';
                Wcoin='0';
            
            }
            int k=count[temp-1];
            if(SolveVert(temp)){//Check vertical win conidtion
                System.out.println("Winner" + Wcoin);
                break;
                
            }if(SolveHorz(temp, k)){// Check horizontal win conidtion
                System.out.println("Winner" + Wcoin);
                break;
            }
            System.out.println("");

            
        
            }
    }
    public static void printBoard(){//Prints board
         for(int i=0; i < board.length; i++){
             for(int j=0; j < board[i].length; j++){
                System.out.print(" | ");
                if(board[i][j] == ' '){
                    System.out.print("   ");
                }else{
                    System.out.print(board[i][j]);
                }
             }
             System.out.println();
         }
    }
    // When you do the drop function it remembers the x axis, it checks i - board[x-1].length; 
    //It just checks the one vertical of wherever the last token was dropped.
    public static boolean SolveVert( int x){
        int count=0;
        for(int i=0; i<board[x-1].length-1; i++){
            if(board[i][x-1] == Wcoin){
  
                count++;
                if(count == 4){
                    System.out.println("Winner! " + Wcoin);
                    printBoard();
                    return true;
                }
            }else{
                count=0;
            }
        }
        return false;
    }
    /*Same thing as SolveVert but a bit more complocated. Since the board is backwards Ie, the bottom is the largest element
    since the boardlength is set at 6 we do 6-k and then after that its the same as solveVert()
    */
    public static boolean SolveHorz(int x,int k){
        int count=0;
        k=6-k;
        for(int i=0; i < 6; i++){
            if(board[k][i] == Wcoin){
                    count++;
                    if(count == 4){
                        System.out.println("Winner! " + Wcoin);
                        printBoard();
                        return true;
                    }
                }else{
                    count=0;
                }    
            }
    return false;
    }   
    //Really simple, board[c-count[x-1]], count[] is the an int array that keeps track of how many tokens are in that one column;
    //x-1 is just because the array starts at 0 and this game starts at 1, so we need the offset.

    public static void Drop(int x){
        board[5-count[x-1]][x-1]=coin;
        count[x-1]++;
    }
}
